// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import {Time} from "@openzeppelin/contracts/utils/types/Time.sol";
import {EnumerableMap} from "@openzeppelin/contracts/utils/structs/EnumerableMap.sol";
import {EnumerableSet} from "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import {UUPSUpgradeable} from "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol";




import {MapWithTimeData} from "./lib/MapWithTimeData.sol";
import {IParameters} from "./interfaces/IParameters.sol";
import {IConsensusRestaking} from "./interfaces/IRestaking.sol";
import {IValidatorRegistrySystem} from "./interfaces/IRegistry.sol";

import {IServiceManager} from "@eigenlayer-middleware/src/interfaces/IServiceManager.sol";
import {IStrategyManager} from "@eigenlayer/src/contracts/interfaces/IStrategyManager.sol";
import {IAVSDirectory} from "@eigenlayer/src/contracts/interfaces/IAVSDirectory.sol";
import {IDelegationManager} from "@eigenlayer/src/contracts/interfaces/IDelegationManager.sol";
import {ISignatureUtils} from "@eigenlayer/src/contracts/interfaces/ISignatureUtils.sol";
import {IStrategy} from "@eigenlayer/src/contracts/interfaces/IStrategy.sol";
import {AVSDirectoryStorage} from "@eigenlayer/src/contracts/core/AVSDirectoryStorage.sol";
import {DelegationManagerStorage} from "@eigenlayer/src/contracts/core/DelegationManagerStorage.sol";
import {StrategyManagerStorage} from "@eigenlayer/src/contracts/core/StrategyManagerStorage.sol";

contract ConsensusEigenLayerMiddleware is
    IConsensusRestaking,
    IServiceManager,
    OwnableUpgradeable,
    UUPSUpgradeable
{
    using EnumerableSet for EnumerableSet.AddressSet;
    using EnumerableMap for EnumerableMap.AddressToUintMap;
    using MapWithTimeData for EnumerableMap.AddressToUintMap;




    uint48 public START_TIMESTAMP;


    IParameters public parameters;


    IValidatorRegistrySystem public registry;


    EnumerableMap.AddressToUintMap private strategies;


    IAVSDirectory public AVS_DIRECTORY;


    DelegationManagerStorage public DELEGATION_MANAGER;


    StrategyManagerStorage public STRATEGY_MANAGER;


    bytes32 public PROTOCOL_IDENTIFIER;

    uint256[41] private __gap;


    error StrategyNotAllowed();
    error OperatorAlreadyRegisteredToAVS();



    function initialize(
        address _owner,
        address _parameters,
        address _registry,
        address _eigenlayerAVSDirectory,
        address _eigenlayerDelegationManager,
        address _eigenlayerStrategyManager
    ) public initializer {
        __Ownable_init(_owner);
        parameters = IParameters(_parameters);
        registry = IValidatorRegistrySystem(_registry);
        START_TIMESTAMP = Time.timestamp();

        AVS_DIRECTORY = IAVSDirectory(_eigenlayerAVSDirectory);
        DELEGATION_MANAGER = DelegationManagerStorage(
            _eigenlayerDelegationManager
        );
        STRATEGY_MANAGER = StrategyManagerStorage(_eigenlayerStrategyManager);
        PROTOCOL_IDENTIFIER = keccak256("CONSENSUS_PROTOCOL");
    }

    function _authorizeUpgrade(
        address newImplementation
    ) internal override onlyOwner {}

    function getPeriodStartTime(
        uint48 periodIndex
    ) public view returns (uint48) {
        return
            START_TIMESTAMP + periodIndex * parameters.VALIDATOR_EPOCH_TIME();
    }

    function getPeriodByTimestamp(
        uint48 timestamp
    ) public view returns (uint48) {
        return
            (timestamp - START_TIMESTAMP) / parameters.VALIDATOR_EPOCH_TIME();
    }

    function getActivePeriod() public view returns (uint48) {
        return getPeriodByTimestamp(Time.timestamp());
    }

    function getWhitelistedStrategies() public view returns (address[] memory) {
        return strategies.keys();
    }

    function enrollValidatorNode(
        string calldata serviceEndpoint,
        ISignatureUtils.SignatureWithSaltAndExpiry calldata providerSignature
    ) public {
        if (registry.validateNodeRegistration(msg.sender)) {
            revert ParticipantExists();
        }

        if (!DELEGATION_MANAGER.isOperator(msg.sender)) {
            revert NodeProviderNotActive();
        }

        registerOperatorToAVS(msg.sender, providerSignature);
        registry.enrollValidatorNode(msg.sender, serviceEndpoint);
    }

    function removeValidatorNode() public {
        if (!registry.validateNodeRegistration(msg.sender)) {
            revert ParticipantNotFound();
        }

        deregisterOperatorFromAVS(msg.sender);
        registry.removeValidatorNode(msg.sender);
    }

    function suspendValidatorNode() public {
        registry.suspendValidatorNode(msg.sender);
    }

    function reactivateValidatorNode() public {
        registry.reactivateValidatorNode(msg.sender);
    }

  function pauseStrategy() public {
        if (!strategies.contains(msg.sender)) {
            revert ParticipantNotFound();
        }

        strategies.disable(msg.sender);
    }


    function unpauseStrategy() public {
        if (!strategies.contains(msg.sender)) {
            revert ParticipantNotFound();
        }

        strategies.enable(msg.sender);
    }

    function getProviderCollateral(
        address provider,
        address tokenAddress
    ) public view returns (uint256) {
        uint48 timestamp = Time.timestamp();
        return getProviderCollateralAt(provider, tokenAddress, timestamp);
    }

    function getProviderCollateralTokens(
        address provider
    ) public view returns (address[] memory, uint256[] memory) {
        address[] memory collateralTokens = new address[](strategies.length());
        uint256[] memory amounts = new uint256[](strategies.length());

        uint48 periodStartTs = getPeriodStartTime(
            getPeriodByTimestamp(Time.timestamp())
        );

        for (uint256 i = 0; i < strategies.length(); ++i) {
            (
                address strategy,
                uint48 enabledTime,
                uint48 disabledTime
            ) = strategies.atWithTimes(i);

            if (!_wasEnabledAt(enabledTime, disabledTime, periodStartTs)) {
                continue;
            }

            IStrategy strategyImpl = IStrategy(strategy);
            address collateral = address(strategyImpl.underlyingToken());
            collateralTokens[i] = collateral;

            uint256 shares = DELEGATION_MANAGER.operatorShares(
                provider,
                strategyImpl
            );
            amounts[i] = strategyImpl.sharesToUnderlyingView(shares);
        }

        return (collateralTokens, amounts);
    }


//check
    function isStrategyEnabled(
        address strategy
    ) public view returns (bool) {
        (uint48 enabledTime, uint48 disabledTime) = strategies.getTimes(strategy);
        return enabledTime != 0 && disabledTime == 0;
    }

    function getProviderCollateralAt(
        address provider,
        address tokenAddress,
        uint48 timestamp
    ) public view returns (uint256 amount) {
        if (timestamp > Time.timestamp() || timestamp < START_TIMESTAMP) {
            revert MalformedRequest();
        }

        uint48 periodStartTs = getPeriodStartTime(
            getPeriodByTimestamp(timestamp)
        );

        for (uint256 i = 0; i < strategies.length(); i++) {
            (
                address strategy,
                uint48 enabledTime,
                uint48 disabledTime
            ) = strategies.atWithTimes(i);

            if (
                tokenAddress != address(IStrategy(strategy).underlyingToken())
            ) {
                continue;
            }

            if (!_wasEnabledAt(enabledTime, disabledTime, periodStartTs)) {
                continue;
            }

            uint256 shares = DELEGATION_MANAGER.operatorShares(
                provider,
                IStrategy(strategy)
            );
            amount += IStrategy(strategy).sharesToUnderlyingView(shares);
        }

        return amount;
    }

    function registerStrategy(address strategy) public onlyOwner {
        if (strategies.contains(strategy)) {
            revert ParticipantExists();
        }

        if (
            !STRATEGY_MANAGER.strategyIsWhitelistedForDeposit(
                IStrategy(strategy)
            )
        ) {
            revert StrategyNotAllowed();
        }

        strategies.add(strategy);
        strategies.enable(strategy);
    }

    function deregisterStrategy(address strategy) public onlyOwner {
        if (!strategies.contains(strategy)) {
            revert ParticipantNotFound();
        }

        strategies.remove(strategy);
    }


    function registerOperatorToAVS(
        address operator,
        ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature
    ) public override {
        AVS_DIRECTORY.registerOperatorToAVS(operator, operatorSignature);
    }

    function deregisterOperatorFromAVS(address operator) public override {
        if (msg.sender != operator) {
            revert OperationForbidden();
        }

        AVS_DIRECTORY.deregisterOperatorFromAVS(operator);
    }

    function getOperatorRestakedStrategies(
        address operator
    ) external view override returns (address[] memory) {
        address[] memory restakedStrategies = new address[](
            strategies.length()
        );
        uint48 periodStartTs = getPeriodStartTime(
            getPeriodByTimestamp(Time.timestamp())
        );

        for (uint256 i = 0; i < strategies.length(); ++i) {
            (
                address strategy,
                uint48 enabledTime,
                uint48 disabledTime
            ) = strategies.atWithTimes(i);

            if (!_wasEnabledAt(enabledTime, disabledTime, periodStartTs)) {
                continue;
            }

            if (
                DELEGATION_MANAGER.operatorShares(
                    operator,
                    IStrategy(strategy)
                ) > 0
            ) {
                restakedStrategies[restakedStrategies.length] = strategy;
            }
        }

        return restakedStrategies;
    }

    function getRestakeableStrategies()
        external
        view
        override
        returns (address[] memory)
    {
        return strategies.keys();
    }

    function avsDirectory() external view override returns (address) {
        return address(AVS_DIRECTORY);
    }

    function _wasEnabledAt(
        uint48 enabledTime,
        uint48 disabledTime,
        uint48 timestamp
    ) private pure returns (bool) {
        return
            enabledTime != 0 &&
            enabledTime <= timestamp &&
            (disabledTime == 0 || disabledTime >= timestamp);
    }



     function updateAVSMetadataURI(
        string calldata metadataURI
    ) public onlyOwner {
        AVS_DIRECTORY.updateAVSMetadataURI(metadataURI);
}


}